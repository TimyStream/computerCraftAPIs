-- vim: set filetype=lua:

local button = {
	-- draw the button
	-- takes the term and the panel offset
	draw = function(self, term, offx, offy)
		if self.isSticky then
			offx = 0
			offy = 0
		end

		termx, termy = term.getSize()

		startx = type(self.x) == "function" and self:x(termx, termy) or self.x
		starty = type(self.y) == "function" and self:y(termx, termy) or self.y
		width = type(self.width) == "function" and self:width(termx, termy) or self.width
		height = type(self.height) == "function" and self:height(termx, termy) or self.height

		if self.isVertical then
			textX = startx + math.floor(width / 2)
			textY = starty + math.floor((height - #self.text) / 2)
		elseif not self.isVertical then
			textX = startx + math.floor((width - #self.text) / 2)
			textY = starty + math.floor(height / 2)
		end

		self:rawDraw(term, startx + offx, starty + offy, width, height, textX + offx, textY + offy, self.text)
	end,

	-- a basic draw function, used by draw
	rawDraw = function(self, term, startx, starty, width, height, textx, texty, text)
		term.setTextColor(self.textColor)
		term.setBackgroundColor(self.backgroundColor)

		c = 0
		y = starty
		while y < starty + height do
			term.setCursorPos(startx, y)
			x = startx
			while x < startx + width do
				if text ~= nil then
					if not self.isVertical and y == texty and x == textx + c and c < #text then
						term.write(text:sub(c + 1, c + 1))
						c = c + 1
					elseif self.isVertical and y == texty + c and x == textx and c < #text then
						term.write(text:sub(c + 1, c + 1))
						c = c + 1
					else
						term.write(" ")
					end
				else
					term.write(" ")
				end
				x = x + 1
			end
			y = y + 1
		end
	end
}

local function isOneOfTypes(var, ...)
	for _, v in ipairs(arg) do
		if type(var) == v then
			return true
		end
	end
	return false
end

function new(options)
	assert(isOneOfTypes(options.x, "number", "function"), "button.new: x is not a number or function")
	assert(isOneOfTypes(options.y, "number", "function"), "button.new: y is not a number or function")
	assert(isOneOfTypes(options.width, "number", "function"), "button.new: width is not a number or function")
	assert(isOneOfTypes(options.height, "number", "function"), "button.new: height is not a number or function")

	local o = {
		x = options.x,
		y = options.y,
		width = options.width,
		height = options.height,
		text = options.text or "",
		isSticky = options.isSticky or false,
		isVertical = options.isVertical or false,
		textColor = options.textColor or colors.black,
		backgroundColor = options.backgroundColor or colors.white,
		callback = options.callback
	}

	setmetatable(o, {__index = button})

	return o
end

--
-- some usefull helper functions
anchorTop = 1

anchorBottom = function(element, termx, termy)
	return termy
end

anchorLeft = 1

anchorRight = function(element, termx, termy)
	return termx
end

width = function(percent)
	return function(element, termx, termy)
		return math.floor(termx * percent)
	end
end

maxWidth = width(1)

height = function(percent)
	return function(element, termx, termy)
		return math.floor(termy * percent)
	end
end

maxHeight = height(1)

