
Display = {}
function Display:create(side)
	o = {}
	setmetatable(o, self)
	self.__index = self
	o.term = peripheral.wrap(side)
	o.buttons = {}
	return o
end
function Display:resetAndClear()
	self.term.setTextColor(colors.white)
	self.term.setBackgroundColor(colors.black)
	self.term.clear()
end
function Display:addButton(button)
	table.insert(self.buttons, button)
end
function Display:handleEvent(xPos, yPos)
	for _, button in pairs(self.buttons) do
		if xPos >= button.x and xPos <= (button.x + button.width) and yPos >= button.y and yPos <= (button.y + button.height) then
			if type(button.func) == "function" then
				if button.func(button) then
					button:draw(self.term)
				end
			end
		end
	end
end

-------------------------------------------------------------------------------

Button = {}
function Button:create(text, x, y, width, height)
	local o = {}
	setmetatable(o, self)
	self.__index = self

	o.text = text
	o.x = x
	o.y = y
	o.width = width or (string.len(text) + 2)
	o.height = height or 3
	o.textColor = colors.white
	o.backgroundColor = colors.black
	return o
end
function Button:setColors(textColor, backgroundColor)
	self.textColor = textColor
	self.backgroundColor = backgroundColor
end
function Button:addListener(func)
	self.func = func
end
function Button:draw(term)
	textX = self.x + math.floor((self.width - string.len(self.text)) / 2)
	textY = self.y + math.floor(self.height / 2)

	term.setTextColor(self.textColor)
	term.setBackgroundColor(self.backgroundColor)

	y = self.y
	while y < self.y + self.height do
		term.setCursorPos(self.x, y)
		x = self.x
		while x < self.x + self.width do
			if (y == textY and x == textX) then
				term.write(self.text)
				x = x + string.len(self.text)
			else
				term.write(" ")
				x = x + 1
			end
		end
		y = y + 1
	end
end

-------------------------------------------------------------------------------

Rectangle = {}
function Rectangle:create(x, y, width, height)
	local o = {}
	setmetatable(o, self)
	self.__index = self

	o.x = x
	o.y = y
	o.width = width
	o.height = height
	o.backgroundColor = colors.black
	return o
end
function Rectangle:setBackgroundColor(backgroundColor)
	self.backgroundColor = backgroundColor
end
function Rectangle:draw(term)
	term.setBackgroundColor(self.backgroundColor)

	for y = self.y, self.y + self.height -1 do
		term.setCursorPos(self.x, y)
		for x = self.x, self.x + self.width -1 do
				term.write(" ")
		end
	end
end

